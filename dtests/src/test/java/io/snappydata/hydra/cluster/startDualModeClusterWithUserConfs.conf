hydra.Prms-testRequirement = "Test to start the snappy embedded mode and smart connector mode cluster using user specified confs for dateStores,
                              lead and locator members and spark slaves and master node";
hydra.Prms-testDescription = "This test starts the snappy embedded as well as smart connector mode cluster
                              for long running test scenarios where in cluster will be started using user specified confs in first test and then rest all
                              tests will use the same cluster.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_1.inc;

THREADGROUP snappyThread
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;


INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappyTest
            runMode = always
            threadGroups = snappyThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_copyUserConfs
            runMode = always
            threadGroups = snappyThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_startSnappyCluster
            runMode = always
            threadGroups = snappyThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLocatorInfo
            runMode = always
            threadGroups = snappyThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writePrimaryLocatorHostPortInfo
            runMode = always
            threadGroups = snappyThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLeadHostPortInfo
            runMode = always
            threadGroups = snappyThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_startSparkCluster
            runMode = always
            threadGroups = snappyThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeMasterConnInfo
            runMode = always
            threadGroups = snappyThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_recordProcessIDWithHostWithUserConfsTest
            runMode = always
            threadGroups = snappyThread;

hydra.Prms-totalTaskTimeSec           = 600;
hydra.Prms-maxResultWaitSec           = 3600;

hydra.Prms-maxCloseTaskResultWaitSec  = 3600;

io.snappydata.hydra.cluster.SnappyPrms-isStopMode = true;
io.snappydata.hydra.cluster.SnappyPrms-isLongRunningTest = true;
io.snappydata.hydra.cluster.SnappyPrms-isUserConfTest = true;
io.snappydata.hydra.cluster.SnappyPrms-useSmartConnectorMode = true;

// Below parameters to be added in local.conf while running the test
io.snappydata.hydra.cluster.SnappyPrms-locatorList = "localhost:1527,localhost:1528";
io.snappydata.hydra.cluster.SnappyPrms-primaryLocatorHost = "localhost";
io.snappydata.hydra.cluster.SnappyPrms-primaryLocatorPort = "1527";
io.snappydata.hydra.cluster.SnappyPrms-leadHost = "localhost";
io.snappydata.hydra.cluster.SnappyPrms-leadPort = "8090";
io.snappydata.hydra.cluster.SnappyPrms-sparkMasterHost = "localhost";
io.snappydata.hydra.cluster.SnappyPrms-hostNames = "localhost localhost";

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;