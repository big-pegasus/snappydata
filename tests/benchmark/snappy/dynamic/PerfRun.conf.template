#Do not change the way of queries, sparkProperties, sparkSqlProperties. Just change the values inside strings

#queries to be run
queries="\"1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-22\""
#queries=10
#queries="\"1-3-14\""


#spark Properties spefied in lead
#spark-executor-cores has nothing to do with CPU cores available.
#sparkProperties="-J-Xmx2g -spark.network.timeout=300s -spark.driver.maxResultSize=2g -spark.shuffle.sort.bypassMergeThreshold=28"
sparkProperties="-heap-size=1g -memory-size=1g -conserve-sockets=false"

#Spark Sql properties are specified while executing query
#spark.sql.shuffle.partitions=${shufflePartitions},spark.sql.inMemoryColumnarStorage.compressed=${inMemoryColumnarStorageCompressed}
#spark.sql.inMemoryColumnarStorage.compressed=false
sparkSqlProperties="\"\""

#location of checkout
SnappyData=/home/kishor/SNAPPY/CHECKOUT/snappydata/build-artifacts/scala-2.11/snappy
#SnappyData=/home/kishor/SNAPPY/CHECKOUT/snappydata-0.7-bin

#number of buckets for order and lineitem tables
buckets_Order_Lineitem=128

#number of buckets for Customer, Part and PartSupplier tables
buckets_Cust_Part_PartSupp=128

#Are Nation, Region, Supplier tables column tables?
IsSupplierColumnTable=true

#number of buckets for Nation, Region, Supplier
buckets_Supplier=128

#Redundancy Level
Redundancy=0

#Whether region is persistent
Persistence=false

#Type of Persistence
Persistence_Type=SYNCHRONOUS

#Loading from parquet or csv file
Parquet=true

#From how many files data should be loaded in table
#NumberOfLoadStages=10
NumberOfLoadStages=1

#Machine Setup
locator=localhost
leads=localhost
servers=(localhost localhost)
#servers=(localhost)

#Port required while doing exeution through JDBC
port=1527

#Log Directories
locatorDir=/home/kishor/SNAPPY/OUTPUT/TPCH/locator
leadDir=/home/kishor/SNAPPY/OUTPUT/TPCH/lead
serverDir=/home/kishor/SNAPPY/OUTPUT/TPCH/server

#Locator Properties
locatorProperties="-conserve-sockets=false -J-Xloggc:gc.log -J-XX:+PrintGCDetails -J-XX:+PrintGCDateStamps -J-XX:+PrintGCTimeStamps -J-XX:+PrintHeapAtGC"

#Server properties
#serverMemory="-heap-size=1g -memory-size=2g  -conserve-sockets=false-J-XX:NewRatio=9 -J-Xloggc:gc.log -J-XX:+PrintGCDetails -J-XX:+PrintGCDateStamps -J-XX:+PrintGCTimeStamps -J-XX:+PrintHeapAtGC"
serverMemory="-heap-size=1g -memory-size=2g"

### While collecting results for result validation, always keep isDynamic=false and resultCollection=false. In this case WarmupRuns and AverageRuns will not be considered
### In case of Performance run, isDynamic is true, resultCollection is fasle and set the required number of warmupRuns and AverageRuns
#represent whether query should use dynamic paramters or static
IsDynamic=false

#Whether to collect results.For performance testing this should be false.
ResultCollection=true

#warmUpIterations
WarmupRuns=2
#Actual runs whose average will be taken and repordted as performance
AverageRuns=3

# location of jar which has TPCH related class files
TPCHJar=/home/kishor/SNAPPY/CHECKOUT/snappydata/cluster/build-artifacts/scala-2.11/libs/snappydata-cluster_2.11-1.0.0-tests.jar

#Size of the TPCH data. Do not chage format
#dataSize=1GB_Stages
dataSize=1GB

#Location of the TPCH Data. Make sure directory name is same as the dataSize specified above
dataDir=/home/kishor/SNAPPY/DATA/TPCH/$dataSize

#Location where final output will be collected
outputLocation=/home/kishor/SNAPPY/OUTPUT/TPCH/SNAPPY_RESULT

#GoldenFile against which query results should be compared
ExpectedResultsAvailableAt=/home/kishor/SNAPPY/CURRENTWORK/volumeTesting/STOCK_SPARK_RESULT

#Location of query results files
ActualResultsAvailableAt=/home/kishor/SNAPPY/CURRENTWORK/volumeTesting/23May_SNAPPY_RESULT
